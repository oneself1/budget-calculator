// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
let categories = JSON.parse(localStorage.getItem('categories')) || [
    {
        id: '1',
        name: '–ï–¥–∞',
        emoji: 'üçï',
        subcategories: [
            { id: '1-1', name: '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', emoji: 'üõí' },
            { id: '1-2', name: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', emoji: 'üçΩÔ∏è' }
        ]
    },
    {
        id: '2',
        name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        emoji: 'üöó',
        subcategories: [
            { id: '2-1', name: '–ë–µ–Ω–∑–∏–Ω', emoji: '‚õΩ' },
            { id: '2-2', name: '–¢–∞–∫—Å–∏', emoji: 'üöï' }
        ]
    },
    {
        id: '3',
        name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        emoji: 'üé¨',
        subcategories: []
    }
];

let expenses = JSON.parse(localStorage.getItem('expenses')) || [];

// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let currentState = {
    editingCategoryId: null,
    selectedCategoryId: null,
    selectedSubcategoryId: null,
    editingSubcategory: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function init() {
    updateCategoriesList();
    updateExpensesList();
    updateTotalExpenses();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function updateCategoriesList() {
    const categoriesList = document.getElementById('categoriesList');
    categoriesList.innerHTML = '';

    categories.forEach(category => {
        const total = calculateCategoryTotal(category.id);
        
        const categoryElement = document.createElement('div');
        categoryElement.className = 'category-item';
        categoryElement.onclick = () => openEditCategoryModal(category.id);
        
        categoryElement.innerHTML = `
            <div class="category-left">
                <div class="category-emoji">${category.emoji}</div>
                <div class="category-info">
                    <h3>${category.name}</h3>
                    ${category.subcategories.length > 0 ? 
                        `<div class="subcategories-count">${category.subcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>` : 
                        ''
                    }
                </div>
            </div>
            <div class="category-amount">${total} ‚ÇΩ</div>
        `;
        
        categoriesList.appendChild(categoryElement);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
function updateExpensesList() {
    const expensesList = document.getElementById('expensesList');
    expensesList.innerHTML = '';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Ö–æ–¥–æ–≤
    const recentExpenses = expenses
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 10);

    if (recentExpenses.length === 0) {
        expensesList.innerHTML = '<div style="text-align: center; color: #7f8c8d; padding: 20px;">–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤</div>';
        return;
    }

    recentExpenses.forEach(expense => {
        const category = categories.find(cat => cat.id === expense.categoryId);
        let subcategory = null;
        if (expense.subcategoryId) {
            subcategory = category.subcategories.find(sub => sub.id === expense.subcategoryId);
        }

        const expenseElement = document.createElement('div');
        expenseElement.className = 'expense-item';
        
        expenseElement.innerHTML = `
            <div class="expense-info">
                <div class="expense-emoji">${subcategory ? subcategory.emoji : category.emoji}</div>
                <div class="expense-details">
                    <h4>${subcategory ? subcategory.name : category.name}</h4>
                    ${expense.description ? `<div class="expense-description">${expense.description}</div>` : ''}
                    <div class="expense-date">${formatDate(expense.date)}</div>
                </div>
            </div>
            <div class="expense-amount">-${expense.amount} ‚ÇΩ</div>
        `;
        
        expensesList.appendChild(expenseElement);
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function calculateCategoryTotal(categoryId) {
    let total = 0;
    
    // –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    total += expenses
        .filter(expense => expense.categoryId === categoryId && !expense.subcategoryId)
        .reduce((sum, expense) => sum + expense.amount, 0);
    
    // –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const category = categories.find(cat => cat.id === categoryId);
    if (category && category.subcategories) {
        category.subcategories.forEach(subcategory => {
            total += expenses
                .filter(expense => expense.subcategoryId === subcategory.id)
                .reduce((sum, expense) => sum + expense.amount, 0);
        });
    }
    
    return total;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
function updateTotalExpenses() {
    const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
    document.getElementById('totalExpenses').textContent = total + ' ‚ÇΩ';
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ - —Ä–∞—Å—Ö–æ–¥—ã
function openAddExpenseModal() {
    currentState.selectedCategoryId = null;
    currentState.selectedSubcategoryId = null;
    
    document.getElementById('expenseStep1').style.display = 'block';
    document.getElementById('expenseStep2').style.display = 'none';
    document.getElementById('expenseStep3').style.display = 'none';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryOptions = document.getElementById('categoryOptions');
    categoryOptions.innerHTML = '';
    
    categories.forEach(category => {
        const option = document.createElement('div');
        option.className = 'subcategory-option';
        option.onclick = () => selectCategoryForExpense(category.id);
        option.innerHTML = `
            <span class="category-emoji">${category.emoji}</span>
            <span>${category.name}</span>
            ${category.subcategories.length > 0 ? 
                `<span style="margin-left: auto; color: #7f8c8d; font-size: 0.9em;">${category.subcategories.length} –ø–æ–¥–∫–∞—Ç.</span>` : 
                ''
            }
        `;
        categoryOptions.appendChild(option);
    });
    
    document.getElementById('addExpenseModal').style.display = 'block';
}

function selectCategoryForExpense(categoryId) {
    const category = categories.find(cat => cat.id === categoryId);
    currentState.selectedCategoryId = categoryId;
    
    if (category.subcategories && category.subcategories.length > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.getElementById('expenseStep1').style.display = 'none';
        document.getElementById('expenseStep2').style.display = 'block';
        
        const subcategoryOptions = document.getElementById('subcategoryOptions');
        subcategoryOptions.innerHTML = '';
        
        document.getElementById('subcategoryLabel').textContent = `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è ${category.emoji} ${category.name}:`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        const noSubcategoryOption = document.createElement('div');
        noSubcategoryOption.className = 'subcategory-option';
        noSubcategoryOption.onclick = () => selectSubcategoryForExpense(null);
        noSubcategoryOption.innerHTML = `
            <span>üìÅ –ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
        `;
        subcategoryOptions.appendChild(noSubcategoryOption);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category.subcategories.forEach(subcategory => {
            const option = document.createElement('div');
            option.className = 'subcategory-option';
            option.onclick = () => selectSubcategoryForExpense(subcategory.id);
            option.innerHTML = `
                <span class="category-emoji">${subcategory.emoji}</span>
                <span>${subcategory.name}</span>
            `;
            subcategoryOptions.appendChild(option);
        });
    } else {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã
        selectSubcategoryForExpense(null);
    }
}

function selectSubcategoryForExpense(subcategoryId) {
    currentState.selectedSubcategoryId = subcategoryId;
    
    const category = categories.find(cat => cat.id === currentState.selectedCategoryId);
    let displayText = `${category.emoji} ${category.name}`;
    
    if (subcategoryId) {
        const subcategory = category.subcategories.find(sub => sub.id === subcategoryId);
        displayText += ` ‚Üí ${subcategory.emoji} ${subcategory.name}`;
    }
    
    document.getElementById('selectedCategoryDisplay').textContent = displayText;
    
    document.getElementById('expenseStep2').style.display = 'none';
    document.getElementById('expenseStep3').style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    document.getElementById('expenseAmount').value = '';
    document.getElementById('expenseDescription').value = '';
    document.getElementById('expenseAmount').focus();
}

function backToCategorySelection() {
    document.getElementById('expenseStep2').style.display = 'none';
    document.getElementById('expenseStep1').style.display = 'block';
}

function backToSubcategorySelection() {
    document.getElementById('expenseStep3').style.display = 'none';
    document.getElementById('expenseStep2').style.display = 'block';
}

function addExpense() {
    const amount = parseFloat(document.getElementById('expenseAmount').value);
    const description = document.getElementById('expenseDescription').value.trim();
    
    if (!amount || amount <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
        return;
    }
    
    if (!currentState.selectedCategoryId) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        return;
    }
    
    const newExpense = {
        id: Date.now().toString(),
        amount: amount,
        categoryId: currentState.selectedCategoryId,
        subcategoryId: currentState.selectedSubcategoryId,
        date: new Date().toISOString(),
        description: description || undefined
    };
    
    expenses.push(newExpense);
    saveData();
    updateCategoriesList();
    updateExpensesList();
    updateTotalExpenses();
    closeAddExpenseModal();
    
    alert('–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
}

function closeAddExpenseModal() {
    document.getElementById('addExpenseModal').style.display = 'none';
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function openAddCategoryModal() {
    currentState.editingCategoryId = null;
    document.getElementById('categoryModalTitle').textContent = 'üìÅ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    document.getElementById('categoryName').value = '';
    document.getElementById('categoryEmoji').value = '';
    document.getElementById('subcategoriesList').innerHTML = '';
    
    document.getElementById('categoryModal').style.display = 'block';
}

function openEditCategoryModal(categoryId) {
    const category = categories.find(cat => cat.id === categoryId);
    if (!category) return;
    
    currentState.editingCategoryId = categoryId;
    document.getElementById('categoryModalTitle').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    document.getElementById('categoryName').value = category.name;
    document.getElementById('categoryEmoji').value = category.emoji;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    updateSubcategoriesList();
    
    document.getElementById('categoryModal').style.display = 'block';
}

function updateSubcategoriesList() {
    const subcategoriesList = document.getElementById('subcategoriesList');
    subcategoriesList.innerHTML = '';
    
    const category = categories.find(cat => cat.id === currentState.editingCategoryId);
    if (!category) return;
    
    category.subcategories.forEach(subcategory => {
        const item = document.createElement('div');
        item.className = 'subcategory-item';
        item.innerHTML = `
            <div class="subcategory-info">
                <span class="category-emoji">${subcategory.emoji}</span>
                <span>${subcategory.name}</span>
            </div>
            <div>
                <button class="btn-danger" onclick="editSubcategory('${subcategory.id}')">‚úèÔ∏è</button>
                <button class="btn-danger" onclick="deleteSubcategory('${subcategory.id}')">üóëÔ∏è</button>
            </div>
        `;
        subcategoriesList.appendChild(item);
    });
    
    if (category.subcategories.length === 0) {
        subcategoriesList.innerHTML = '<div style="text-align: center; color: #7f8c8d; padding: 20px;">–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>';
    }
}

function saveCategory() {
    const name = document.getElementById('categoryName').value.trim();
    const emoji = document.getElementById('categoryEmoji').value.trim();
    
    if (!name || !emoji) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–º–∞–π–ª–∏–∫');
        return;
    }
    
    if (currentState.editingCategoryId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryIndex = categories.findIndex(cat => cat.id === currentState.editingCategoryId);
        if (categoryIndex !== -1) {
            categories[categoryIndex].name = name;
            categories[categoryIndex].emoji = emoji;
        }
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const newCategory = {
            id: Date.now().toString(),
            name: name,
            emoji: emoji,
            subcategories: []
        };
        categories.push(newCategory);
    }
    
    saveData();
    updateCategoriesList();
    closeCategoryModal();
}

function closeCategoryModal() {
    document.getElementById('categoryModal').style.display = 'none';
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ - –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function openAddSubcategoryModal() {
    currentState.editingSubcategory = null;
    document.getElementById('subcategoryModalTitle').textContent = 'üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    document.getElementById('subcategoryName').value = '';
    document.getElementById('subcategoryEmoji').value = '';
    
    document.getElementById('subcategoryModal').style.display = 'block';
}

function editSubcategory(subcategoryId) {
    const category = categories.find(cat => cat.id === currentState.editingCategoryId);
    if (!category) return;
    
    const subcategory = category.subcategories.find(sub => sub.id === subcategoryId);
    if (!subcategory) return;
    
    currentState.editingSubcategory = subcategoryId;
    document.getElementById('subcategoryModalTitle').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    document.getElementById('subcategoryName').value = subcategory.name;
    document.getElementById('subcategoryEmoji').value = subcategory.emoji;
    
    document.getElementById('subcategoryModal').style.display = 'block';
}

function saveSubcategory() {
    const name = document.getElementById('subcategoryName').value.trim();
    const emoji = document.getElementById('subcategoryEmoji').value.trim();
    
    if (!name || !emoji) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–º–∞–π–ª–∏–∫');
        return;
    }
    
    const category = categories.find(cat => cat.id === currentState.editingCategoryId);
    if (!category) return;
    
    if (currentState.editingSubcategory) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const subcategoryIndex = category.subcategories.findIndex(sub => sub.id === currentState.editingSubcategory);
        if (subcategoryIndex !== -1) {
            category.subcategories[subcategoryIndex].name = name;
            category.subcategories[subcategoryIndex].emoji = emoji;
        }
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const newSubcategory = {
            id: `${currentState.editingCategoryId}-${Date.now()}`,
            name: name,
            emoji: emoji
        };
        category.subcategories.push(newSubcategory);
    }
    
    updateSubcategoriesList();
    closeSubcategoryModal();
}

function deleteSubcategory(subcategoryId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
        return;
    }
    
    const category = categories.find(cat => cat.id === currentState.editingCategoryId);
    if (!category) return;
    
    category.subcategories = category.subcategories.filter(sub => sub.id !== subcategoryId);
    updateSubcategoriesList();
}

function closeSubcategoryModal() {
    document.getElementById('subcategoryModal').style.display = 'none';
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
function openStatistics() {
    document.getElementById('statisticsModal').style.display = 'block';
    updateStatistics();
}

function closeStatistics() {
    document.getElementById('statisticsModal').style.display = 'none';
}

function updateStatistics() {
    const period = document.getElementById('statPeriod').value;
    const statisticsData = document.getElementById('statisticsData');
    
    let filteredExpenses = expenses;
    const now = new Date();
    
    if (period === 'week') {
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        filteredExpenses = expenses.filter(expense => new Date(expense.date) >= weekAgo);
    } else if (period === 'month') {
        const monthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
        filteredExpenses = expenses.filter(expense => new Date(expense.date) >= monthAgo);
    } else if (period === 'year') {
        const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
        filteredExpenses = expenses.filter(expense => new Date(expense.date) >= yearAgo);
    }
    
    const total = filteredExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    
    let statisticsHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
            <h3>–û–±—â–∞—è —Å—É–º–º–∞: ${total} ‚ÇΩ</h3>
        </div>
    `;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = {};
    
    categories.forEach(category => {
        const categoryExpenses = filteredExpenses.filter(expense => 
            expense.categoryId === category.id && !expense.subcategoryId
        );
        const categoryTotal = categoryExpenses.reduce((sum, expense) => sum + expense.amount, 0);
        
        const subcategoryStats = {};
        category.subcategories.forEach(subcategory => {
            const subcategoryExpenses = filteredExpenses.filter(expense => 
                expense.subcategoryId === subcategory.id
            );
            const subcategoryTotal = subcategoryExpenses.reduce((sum, expense) => sum + expense.amount, 0);
            if (subcategoryTotal > 0) {
                subcategoryStats[subcategory.id] = {
                    name: subcategory.name,
                    emoji: subcategory.emoji,
                    total: subcategoryTotal,
                    percentage: total > 0 ? (subcategoryTotal / total) * 100 : 0
                };
            }
        });
        
        if (categoryTotal > 0 || Object.keys(subcategoryStats).length > 0) {
            categoryStats[category.id] = {
                name: category.name,
                emoji: category.emoji,
                total: categoryTotal + Object.values(subcategoryStats).reduce((sum, sub) => sum + sub.total, 0),
                subcategories: subcategoryStats
            };
        }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
    const sortedCategories = Object.values(categoryStats).sort((a, b) => b.total - a.total);
    
    sortedCategories.forEach(category => {
        const percentage = total > 0 ? (category.total / total) * 100 : 0;
        
        statisticsHTML += `
            <div class="stat-item">
                <div class="stat-category">
                    <span class="category-emoji">${category.emoji}</span>
                    <span>${category.name}</span>
                </div>
                <div class="stat-amount">${category.total} ‚ÇΩ (${percentage.toFixed(1)}%)</div>
            </div>
            <div class="stat-bar" style="width: ${percentage}%"></div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Object.values(category.subcategories).forEach(subcategory => {
            statisticsHTML += `
                <div class="stat-item" style="margin-left: 20px; font-size: 0.9em;">
                    <div class="stat-category">
                        <span class="category-emoji">${subcategory.emoji}</span>
                        <span>${subcategory.name}</span>
                    </div>
                    <div class="stat-amount">${subcategory.total} ‚ÇΩ (${subcategory.percentage.toFixed(1)}%)</div>
                </div>
            `;
        });
    });
    
    statisticsData.innerHTML = statisticsHTML;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    localStorage.setItem('categories', JSON.stringify(categories));
    localStorage.setItem('expenses', JSON.stringify(expenses));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.onclick = function(event) {
    const modals = document.getElementsByClassName('modal');
    for (let modal of modals) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    }
}