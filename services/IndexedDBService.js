class IndexedDBService {
    constructor() {
        this.dbName = 'BudgetAppDB';
        this.version = 1;
        this.db = null;
    }

    async init() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, this.version);

            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                this.db = request.result;
                resolve(this.db);
            };

            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                
                // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                if (!db.objectStoreNames.contains('incomes')) {
                    const incomeStore = db.createObjectStore('incomes', { keyPath: 'id', autoIncrement: true });
                    incomeStore.createIndex('categoryId', 'categoryId', { unique: false });
                }
                
                if (!db.objectStoreNames.contains('incomeCategories')) {
                    const categoryStore = db.createObjectStore('incomeCategories', { keyPath: 'id', autoIncrement: true });
                    categoryStore.createIndex('name', 'name', { unique: false });
                }
                
                if (!db.objectStoreNames.contains('debts')) {
                    db.createObjectStore('debts', { keyPath: 'id', autoIncrement: true });
                }
                
                if (!db.objectStoreNames.contains('expenseCategories')) {
                    const expenseStore = db.createObjectStore('expenseCategories', { keyPath: 'id', autoIncrement: true });
                    expenseStore.createIndex('name', 'name', { unique: false });
                }
                
                if (!db.objectStoreNames.contains('expenseOperations')) {
                    const expenseOpStore = db.createObjectStore('expenseOperations', { keyPath: 'id', autoIncrement: true });
                    expenseOpStore.createIndex('categoryId', 'categoryId', { unique: false });
                    expenseOpStore.createIndex('subcategoryId', 'subcategoryId', { unique: false });
                }
                
                if (!db.objectStoreNames.contains('settings')) {
                    db.createObjectStore('settings', { keyPath: 'id' });
                }
            };
        });
    }

    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    async getAll(storeName) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readonly');
            const store = transaction.objectStore(storeName);
            const request = store.getAll();

            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async get(storeName, id) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readonly');
            const store = transaction.objectStore(storeName);
            const request = store.get(id);

            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async add(storeName, data) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            const request = store.add(data);

            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async put(storeName, data) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            const request = store.put(data);

            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async delete(storeName, id) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            const request = store.delete(id);

            request.onsuccess = () => resolve(true);
            request.onerror = () => reject(request.error);
        });
    }

    async clear(storeName) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            const request = store.clear();

            request.onsuccess = () => resolve(true);
            request.onerror = () => reject(request.error);
        });
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async getSettings() {
        const settings = await this.get('settings', 1);
        return settings || { currency: "‚ÇΩ" };
    }

    async saveSettings(settings) {
        return await this.put('settings', { id: 1, ...settings });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async getAllData() {
        try {
            const [
                incomes,
                incomeCategories,
                debts,
                expenseCategories,
                expenseOperations,
                settings
            ] = await Promise.all([
                this.getAll('incomes'),
                this.getAll('incomeCategories'),
                this.getAll('debts'),
                this.getAll('expenseCategories'),
                this.getAll('expenseOperations'),
                this.getSettings()
            ]);

            return {
                incomes,
                incomeCategories,
                incomeOperations: incomes, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                debts,
                expenseCategories,
                expenseOperations,
                settings
            };
        } catch (error) {
            console.error('Error loading all data:', error);
            return null;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤)
    async clearAllData() {
        try {
            await Promise.all([
                this.clear('incomes'),
                this.clear('incomeCategories'),
                this.clear('debts'),
                this.clear('expenseOperations')
            ]);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            const basicCategories = this.getDefaultExpenseCategories();
            for (const category of basicCategories) {
                await this.put('expenseCategories', category);
            }
            
            return true;
        } catch (error) {
            console.error('Error clearing data:', error);
            return false;
        }
    }

    getDefaultExpenseCategories() {
        return [
            { 
                id: 1, 
                name: "–ü—Ä–æ–¥—É–∫—Ç—ã", 
                amount: 0, 
                icon: "üõí",
                subcategories: [
                    { id: 101, name: "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", icon: "üõí", amount: 0 },
                    { id: 102, name: "–†—ã–Ω–æ–∫", icon: "ü•¶", amount: 0 },
                    { id: 103, name: "–ú–æ–ª–æ—á–Ω—ã–µ", icon: "ü•õ", amount: 0 },
                    { id: 104, name: "–ú—è—Å–æ –∏ —Ä—ã–±–∞", icon: "üçñ", amount: 0 },
                    { id: 105, name: "–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", icon: "üçé", amount: 0 }
                ]
            },
            { 
                id: 2, 
                name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 
                amount: 0, 
                icon: "üöó",
                subcategories: [
                    { id: 201, name: "–ë–µ–Ω–∑–∏–Ω", icon: "‚õΩ", amount: 0 },
                    { id: 202, name: "–¢–∞–∫—Å–∏", icon: "üöï", amount: 0 },
                    { id: 203, name: "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", icon: "üöå", amount: 0 },
                    { id: 204, name: "–ü–∞—Ä–∫–æ–≤–∫–∞", icon: "üÖøÔ∏è", amount: 0 }
                ]
            },
            { 
                id: 3, 
                name: "–ñ–∏–ª—å–µ", 
                amount: 0, 
                icon: "üè†",
                subcategories: [
                    { id: 301, name: "–ê—Ä–µ–Ω–¥–∞", icon: "üè†", amount: 0 },
                    { id: 302, name: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", icon: "üí°", amount: 0 },
                    { id: 303, name: "–†–µ–º–æ–Ω—Ç", icon: "üõ†Ô∏è", amount: 0 },
                    { id: 304, name: "–ú–µ–±–µ–ª—å", icon: "üõãÔ∏è", amount: 0 }
                ]
            },
            { 
                id: 4, 
                name: "–°–≤—è–∑—å/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", 
                amount: 0, 
                icon: "üì±",
                subcategories: [
                    { id: 401, name: "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", icon: "üì±", amount: 0 },
                    { id: 402, name: "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", icon: "üåê", amount: 0 },
                    { id: 403, name: "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ", icon: "üì∫", amount: 0 }
                ]
            },
            { 
                id: 5, 
                name: "–û–¥–µ–∂–¥–∞", 
                amount: 0, 
                icon: "üëï",
                subcategories: [
                    { id: 501, name: "–û–¥–µ–∂–¥–∞", icon: "üëï", amount: 0 },
                    { id: 502, name: "–û–±—É–≤—å", icon: "üëü", amount: 0 },
                    { id: 503, name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", icon: "üï∂Ô∏è", amount: 0 }
                ]
            },
            { 
                id: 6, 
                name: "–ó–¥–æ—Ä–æ–≤—å–µ", 
                amount: 0, 
                icon: "üè•",
                subcategories: [
                    { id: 601, name: "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", icon: "üíä", amount: 0 },
                    { id: 602, name: "–í—Ä–∞—á–∏", icon: "üë®‚Äç‚öïÔ∏è", amount: 0 },
                    { id: 603, name: "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", icon: "ü¶∑", amount: 0 }
                ]
            },
            { 
                id: 7, 
                name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", 
                amount: 0, 
                icon: "üéÆ",
                subcategories: [
                    { id: 701, name: "–ö–∏–Ω–æ", icon: "üé¨", amount: 0 },
                    { id: 702, name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", icon: "üçΩÔ∏è", amount: 0 },
                    { id: 703, name: "–ö–∞—Ñ–µ", icon: "‚òï", amount: 0 }
                ]
            },
            { 
                id: 8, 
                name: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                amount: 0, 
                icon: "üìö",
                subcategories: [
                    { id: 801, name: "–ö–Ω–∏–≥–∏", icon: "üìñ", amount: 0 },
                    { id: 802, name: "–ö—É—Ä—Å—ã", icon: "üéì", amount: 0 },
                    { id: 803, name: "–°–µ–º–∏–Ω–∞—Ä—ã", icon: "üí°", amount: 0 }
                ]
            },
            { 
                id: 9, 
                name: "–ö—Ä–∞—Å–æ—Ç–∞", 
                amount: 0, 
                icon: "üíÖ",
                subcategories: [
                    { id: 901, name: "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", icon: "üíá", amount: 0 },
                    { id: 902, name: "–ö–æ—Å–º–µ—Ç–∏–∫–∞", icon: "üíÑ", amount: 0 },
                    { id: 903, name: "–°–ø–∞", icon: "üßñ", amount: 0 }
                ]
            },
            { 
                id: 10, 
                name: "–ü–æ–¥–∞—Ä–∫–∏", 
                amount: 0, 
                icon: "üéÅ",
                subcategories: [
                    { id: 1001, name: "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", icon: "üéÇ", amount: 0 },
                    { id: 1002, name: "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏", icon: "üéÑ", amount: 0 },
                    { id: 1003, name: "–¶–≤–µ—Ç—ã", icon: "üíê", amount: 0 }
                ]
            },
            { 
                id: 11, 
                name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", 
                amount: 0, 
                icon: "‚úàÔ∏è",
                subcategories: [
                    { id: 1101, name: "–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã", icon: "‚úàÔ∏è", amount: 0 },
                    { id: 1102, name: "–û—Ç–µ–ª–∏", icon: "üè®", amount: 0 },
                    { id: 1103, name: "–¢—É—Ä—ã", icon: "üó∫Ô∏è", amount: 0 }
                ]
            },
            { 
                id: 12, 
                name: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", 
                amount: 0, 
                icon: "üöô",
                subcategories: [
                    { id: 1201, name: "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", icon: "üìã", amount: 0 },
                    { id: 1202, name: "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", icon: "üîß", amount: 0 },
                    { id: 1203, name: "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", icon: "üåÄ", amount: 0 }
                ]
            }
        ];
    }
}