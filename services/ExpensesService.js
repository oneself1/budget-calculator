class ExpensesService {
    constructor(storageService) {
        this.storage = storageService;
        this.categories = [];
        this.operations = [];
        this.defaultCategories = [
            { 
                id: 1, 
                name: "–ü—Ä–æ–¥—É–∫—Ç—ã", 
                amount: 0, 
                icon: "üõí",
                subcategories: [
                    { id: 101, name: "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", icon: "üõí", amount: 0 },
                    { id: 102, name: "–†—ã–Ω–æ–∫", icon: "ü•¶", amount: 0 },
                    { id: 103, name: "–ú–æ–ª–æ—á–Ω—ã–µ", icon: "ü•õ", amount: 0 },
                    { id: 104, name: "–ú—è—Å–æ –∏ —Ä—ã–±–∞", icon: "üçñ", amount: 0 },
                    { id: 105, name: "–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", icon: "üçé", amount: 0 }
                ]
            },
            { 
                id: 2, 
                name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 
                amount: 0, 
                icon: "üöó",
                subcategories: [
                    { id: 201, name: "–ë–µ–Ω–∑–∏–Ω", icon: "‚õΩ", amount: 0 },
                    { id: 202, name: "–¢–∞–∫—Å–∏", icon: "üöï", amount: 0 },
                    { id: 203, name: "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", icon: "üöå", amount: 0 },
                    { id: 204, name: "–¢–∞–∫—Å–∏", icon: "üöñ", amount: 0 },
                    { id: 205, name: "–ü–∞—Ä–∫–æ–≤–∫–∞", icon: "üÖøÔ∏è", amount: 0 }
                ]
            },
            { 
                id: 3, 
                name: "–ñ–∏–ª—å–µ", 
                amount: 0, 
                icon: "üè†",
                subcategories: [
                    { id: 301, name: "–ê—Ä–µ–Ω–¥–∞", icon: "üè†", amount: 0 },
                    { id: 302, name: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", icon: "üí°", amount: 0 },
                    { id: 303, name: "–†–µ–º–æ–Ω—Ç", icon: "üõ†Ô∏è", amount: 0 },
                    { id: 304, name: "–ú–µ–±–µ–ª—å", icon: "üõãÔ∏è", amount: 0 },
                    { id: 305, name: "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", icon: "üì∫", amount: 0 }
                ]
            },
            { 
                id: 4, 
                name: "–°–≤—è–∑—å/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", 
                amount: 0, 
                icon: "üì±",
                subcategories: [
                    { id: 401, name: "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", icon: "üì±", amount: 0 },
                    { id: 402, name: "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", icon: "üåê", amount: 0 },
                    { id: 403, name: "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ", icon: "üì∫", amount: 0 },
                    { id: 404, name: "–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã", icon: "üé¨", amount: 0 }
                ]
            },
            { 
                id: 5, 
                name: "–û–¥–µ–∂–¥–∞", 
                amount: 0, 
                icon: "üëï",
                subcategories: [
                    { id: 501, name: "–û–¥–µ–∂–¥–∞", icon: "üëï", amount: 0 },
                    { id: 502, name: "–û–±—É–≤—å", icon: "üëü", amount: 0 },
                    { id: 503, name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", icon: "üï∂Ô∏è", amount: 0 },
                    { id: 504, name: "–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ", icon: "üéΩ", amount: 0 }
                ]
            },
            { 
                id: 6, 
                name: "–ó–¥–æ—Ä–æ–≤—å–µ", 
                amount: 0, 
                icon: "üè•",
                subcategories: [
                    { id: 601, name: "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", icon: "üíä", amount: 0 },
                    { id: 602, name: "–í—Ä–∞—á–∏", icon: "üë®‚Äç‚öïÔ∏è", amount: 0 },
                    { id: 603, name: "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", icon: "ü¶∑", amount: 0 },
                    { id: 604, name: "–ê–ø—Ç–µ–∫–∞", icon: "üíä", amount: 0 },
                    { id: 605, name: "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", icon: "üìÑ", amount: 0 }
                ]
            },
            { 
                id: 7, 
                name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", 
                amount: 0, 
                icon: "üéÆ",
                subcategories: [
                    { id: 701, name: "–ö–∏–Ω–æ", icon: "üé¨", amount: 0 },
                    { id: 702, name: "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", icon: "üçΩÔ∏è", amount: 0 },
                    { id: 703, name: "–ö–∞—Ñ–µ", icon: "‚òï", amount: 0 },
                    { id: 704, name: "–ö–æ–Ω—Ü–µ—Ä—Ç—ã", icon: "üéµ", amount: 0 },
                    { id: 705, name: "–•–æ–±–±–∏", icon: "üé®", amount: 0 }
                ]
            },
            { 
                id: 8, 
                name: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                amount: 0, 
                icon: "üìö",
                subcategories: [
                    { id: 801, name: "–ö–Ω–∏–≥–∏", icon: "üìñ", amount: 0 },
                    { id: 802, name: "–ö—É—Ä—Å—ã", icon: "üéì", amount: 0 },
                    { id: 803, name: "–°–µ–º–∏–Ω–∞—Ä—ã", icon: "üí°", amount: 0 },
                    { id: 804, name: "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä", icon: "‚úèÔ∏è", amount: 0 }
                ]
            },
            { 
                id: 9, 
                name: "–ö—Ä–∞—Å–æ—Ç–∞", 
                amount: 0, 
                icon: "üíÖ",
                subcategories: [
                    { id: 901, name: "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", icon: "üíá", amount: 0 },
                    { id: 902, name: "–ö–æ—Å–º–µ—Ç–∏–∫–∞", icon: "üíÑ", amount: 0 },
                    { id: 903, name: "–°–ø–∞", icon: "üßñ", amount: 0 },
                    { id: 904, name: "–ú–∞–Ω–∏–∫—é—Ä", icon: "üíÖ", amount: 0 }
                ]
            },
            { 
                id: 10, 
                name: "–ü–æ–¥–∞—Ä–∫–∏", 
                amount: 0, 
                icon: "üéÅ",
                subcategories: [
                    { id: 1001, name: "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", icon: "üéÇ", amount: 0 },
                    { id: 1002, name: "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏", icon: "üéÑ", amount: 0 },
                    { id: 1003, name: "–¶–≤–µ—Ç—ã", icon: "üíê", amount: 0 },
                    { id: 1004, name: "–°—É–≤–µ–Ω–∏—Ä—ã", icon: "üéÄ", amount: 0 }
                ]
            },
            { 
                id: 11, 
                name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", 
                amount: 0, 
                icon: "‚úàÔ∏è",
                subcategories: [
                    { id: 1101, name: "–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã", icon: "‚úàÔ∏è", amount: 0 },
                    { id: 1102, name: "–û—Ç–µ–ª–∏", icon: "üè®", amount: 0 },
                    { id: 1103, name: "–¢—É—Ä—ã", icon: "üó∫Ô∏è", amount: 0 },
                    { id: 1104, name: "–≠–∫—Å–∫—É—Ä—Å–∏–∏", icon: "üèõÔ∏è", amount: 0 },
                    { id: 1105, name: "–°—É–≤–µ–Ω–∏—Ä—ã", icon: "üéé", amount: 0 }
                ]
            },
            { 
                id: 12, 
                name: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", 
                amount: 0, 
                icon: "üöô",
                subcategories: [
                    { id: 1201, name: "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞", icon: "üìã", amount: 0 },
                    { id: 1202, name: "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", icon: "üîß", amount: 0 },
                    { id: 1203, name: "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", icon: "üåÄ", amount: 0 },
                    { id: 1204, name: "–ú–æ–π–∫–∞", icon: "üßº", amount: 0 },
                    { id: 1205, name: "–ó–∞–ø—á–∞—Å—Ç–∏", icon: "‚öôÔ∏è", amount: 0 }
                ]
            }
        ];
    }

    load(data) {
        this.categories = data?.expenseCategories || [];
        this.operations = data?.expenseOperations || [];
        this.migrateCategories();
        this.updateCategoryAmountsFromOperations();
    }

    migrateCategories() {
        let migrated = false;
        
        this.defaultCategories.forEach(defaultCategory => {
            const categoryExists = this.categories.some(
                category => category.id === defaultCategory.id
            );
            
            if (!categoryExists) {
                this.categories.push({
                    ...defaultCategory
                });
                migrated = true;
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const existingCategory = this.categories.find(c => c.id === defaultCategory.id);
                if (existingCategory && (!existingCategory.subcategories || existingCategory.subcategories.length === 0)) {
                    existingCategory.subcategories = defaultCategory.subcategories || [];
                    migrated = true;
                }
            }
        });

        return migrated;
    }

    updateCategoryAmountsFromOperations() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É–º–º—ã –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.categories.forEach(category => {
            category.amount = 0;
            if (category.subcategories) {
                category.subcategories.forEach(subcategory => {
                    subcategory.amount = 0;
                });
            }
        });
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        this.operations.forEach(operation => {
            this.updateCategoryAmounts(operation);
        });
    }

    updateCategoryAmounts(operation) {
        const category = this.getCategory(operation.categoryId);
        if (category) {
            if (operation.subcategoryId) {
                // –û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const subcategory = category.subcategories?.find(s => s.id === operation.subcategoryId);
                if (subcategory) {
                    subcategory.amount = (subcategory.amount || 0) + operation.amount;
                }
            } else {
                // –û–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category.amount = (category.amount || 0) + operation.amount;
            }
        }
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    addCategory(category) {
        const newCategory = {
            id: Date.now(),
            amount: 0,
            subcategories: [],
            ...category,
            date: new Date().toISOString()
        };
        this.categories.push(newCategory);
        return newCategory;
    }

    updateCategory(id, updatedCategory) {
        const index = this.categories.findIndex(cat => cat.id === id);
        if (index !== -1) {
            this.categories[index] = { ...this.categories[index], ...updatedCategory };
            return this.categories[index];
        }
        return null;
    }

    deleteCategory(id) {
        // –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (ID 1-12)
        if (id >= 1 && id <= 12) {
            throw new Error("–ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å");
        }
        
        const index = this.categories.findIndex(cat => cat.id === id);
        if (index !== -1) {
            // –£–¥–∞–ª—è–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            this.operations = this.operations.filter(op => op.categoryId !== id);
            return this.categories.splice(index, 1)[0];
        }
        return null;
    }

    getCategory(id) {
        return this.categories.find(cat => cat.id === id);
    }

    getCategories() {
        return this.categories;
    }

    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    addSubcategory(categoryId, subcategory) {
        const category = this.getCategory(categoryId);
        if (category) {
            if (!category.subcategories) {
                category.subcategories = [];
            }
            const newSub = {
                id: Date.now(),
                amount: 0,
                ...subcategory
            };
            category.subcategories.push(newSub);
            return newSub;
        }
        return null;
    }

    updateSubcategory(categoryId, subcategoryId, updatedSubcategory) {
        const category = this.getCategory(categoryId);
        if (category && category.subcategories) {
            const index = category.subcategories.findIndex(sub => sub.id === subcategoryId);
            if (index !== -1) {
                category.subcategories[index] = { ...category.subcategories[index], ...updatedSubcategory };
                return category.subcategories[index];
            }
        }
        return null;
    }

    deleteSubcategory(categoryId, subcategoryId) {
        const category = this.getCategory(categoryId);
        if (category && category.subcategories) {
            const index = category.subcategories.findIndex(sub => sub.id === subcategoryId);
            if (index !== -1) {
                const deletedSub = category.subcategories.splice(index, 1)[0];
                
                // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                this.operations = this.operations.filter(operation => 
                    !(operation.categoryId === categoryId && operation.subcategoryId === subcategoryId)
                );
                
                return deletedSub;
            }
        }
        return null;
    }

    // –û–ø–µ—Ä–∞—Ü–∏–∏
    addOperation(operation) {
        const newOperation = {
            id: Date.now(),
            date: new Date().toISOString(),
            ...operation
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        this.updateCategoryAmounts(newOperation);
        
        this.operations.push(newOperation);
        return newOperation;
    }

    updateOperation(operationId, updatedData) {
        const operation = this.getOperation(operationId);
        if (!operation) {
            throw new Error("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }

        const oldAmount = operation.amount;
        const oldCategoryId = operation.categoryId;
        const oldSubcategoryId = operation.subcategoryId;

        // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.reverseCategoryAmounts(operation);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        Object.assign(operation, updatedData);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        this.updateCategoryAmounts(operation);

        return operation;
    }

    getOperation(id) {
        return this.operations.find(op => op.id === id);
    }

    getOperations() {
        return this.operations;
    }

    deleteOperation(id) {
        const index = this.operations.findIndex(op => op.id === id);
        if (index !== -1) {
            const operation = this.operations[index];
            // –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.reverseCategoryAmounts(operation);
            return this.operations.splice(index, 1)[0];
        }
        return null;
    }

    reverseCategoryAmounts(operation) {
        const category = this.getCategory(operation.categoryId);
        if (category) {
            if (operation.subcategoryId) {
                const subcategory = category.subcategories?.find(s => s.id === operation.subcategoryId);
                if (subcategory) {
                    subcategory.amount -= operation.amount;
                }
            } else {
                category.amount -= operation.amount;
            }
        }
    }

    getTotalExpenses() {
        let total = 0;
        this.categories.forEach(category => {
            total += category.amount || 0;
            if (category.subcategories) {
                category.subcategories.forEach(subcategory => {
                    total += subcategory.amount || 0;
                });
            }
        });
        return total;
    }

    calculateCategoryTotal(category) {
        let total = category.amount || 0;
        if (category.subcategories) {
            category.subcategories.forEach(subcategory => {
                total += subcategory.amount || 0;
            });
        }
        return total;
    }
}