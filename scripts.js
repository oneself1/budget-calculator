// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    incomes: [],
    debts: [], 
    expenses: [],
    transactions: [],
    settings: { currency: "‚ÇΩ" }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log("App started!");
    loadData();
    updateUI();
    startClock();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
    const saved = localStorage.getItem('budgetAppData');
    if (saved) {
        try {
            appData = JSON.parse(saved);
            console.log("Data loaded:", appData);
        } catch (e) {
            console.error("Error loading data:", e);
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    localStorage.setItem('budgetAppData', JSON.stringify(appData));
    updateUI();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function switchScreen(screenName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
    document.querySelector(`.nav-item[onclick="switchScreen('${screenName}')"]`).classList.add('active');
    document.getElementById(`${screenName}-screen`).classList.add('active');
    
    if (screenName === 'operations') {
        updateOperationsList();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–∂–∫–∞
function addNewCircle(type) {
    console.log("Adding circle:", type);
    
    const amount = prompt(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ${getTypeName(type)}:`);
    if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É");
        return;
    }
    
    const description = prompt('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:') || getDefaultDescription(type);
    
    const newItem = {
        id: Date.now(),
        amount: parseFloat(amount),
        description: description,
        date: new Date().toISOString().split('T')[0]
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤
    if (type === 'income') {
        appData.incomes.push(newItem);
    } else if (type === 'debt') {
        appData.debts.push(newItem);
    } else {
        appData.expenses.push(newItem);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    appData.transactions.unshift({
        ...newItem,
        type: type,
        amount: type === 'income' ? newItem.amount : -newItem.amount
    });
    
    saveData();
    alert(`${getTypeName(type)} –¥–æ–±–∞–≤–ª–µ–Ω!`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞
function getTypeName(type) {
    const names = {
        income: '–¥–æ—Ö–æ–¥–∞',
        debt: '–¥–æ–ª–≥–∞', 
        expense: '—Ä–∞—Å—Ö–æ–¥–∞'
    };
    return names[type] || '–æ–ø–µ—Ä–∞—Ü–∏–∏';
}

// –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function getDefaultDescription(type) {
    const defaults = {
        income: '–î–æ—Ö–æ–¥',
        debt: '–î–æ–ª–≥', 
        expense: '–†–∞—Å—Ö–æ–¥'
    };
    return defaults[type] || '–û–ø–µ—Ä–∞—Ü–∏—è';
}

// –†–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞
function calculateBudget() {
    const totalIncome = appData.incomes.reduce((sum, item) => sum + item.amount, 0);
    const totalDebts = appData.debts.reduce((sum, item) => sum + item.amount, 0);
    const totalExpenses = appData.expenses.reduce((sum, item) => sum + item.amount, 0);
    const balance = totalIncome - totalDebts - totalExpenses;
    
    const resultsHTML = `
        <div class="result-item">
            <span>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</span>
            <span class="income">${appData.settings.currency}${totalIncome}</span>
        </div>
        <div class="result-item">
            <span>–û–±—â–∏–µ –¥–æ–ª–≥–∏:</span>
            <span class="debt">${appData.settings.currency}${totalDebts}</span>
        </div>
        <div class="result-item">
            <span>–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</span>
            <span class="expense">${appData.settings.currency}${totalExpenses}</span>
        </div>
        <div class="result-item total">
            <span>–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</span>
            <span class="${balance >= 0 ? 'income' : 'expense'}">${appData.settings.currency}${Math.abs(balance)}</span>
        </div>
    `;
    
    document.getElementById('results-content').innerHTML = resultsHTML;
    document.getElementById('results-card').style.display = 'block';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    updateCircles();
    updateBalance();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤
function updateCircles() {
    updateCircleSection('income', appData.incomes);
    updateCircleSection('debt', appData.debts);
    updateCircleSection('expense', appData.expenses);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∫—Ä—É–∂–∫–∞–º–∏
function updateCircleSection(type, items) {
    const container = document.getElementById(`${type}-circles`);
    if (!container) {
        console.error("Container not found:", `${type}-circles`);
        return;
    }
    
    if (items.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–∞–∂–º–∏ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å</div>';
        return;
    }
    
    container.innerHTML = items.map(item => `
        <div class="circle-item circle-${type}" onclick="editCircle('${type}', ${item.id})">
            <div class="circle-amount">${appData.settings.currency}${item.amount}</div>
            <div class="circle-label">${item.description}</div>
            <button class="circle-delete" onclick="event.stopPropagation(); deleteCircle('${type}', ${item.id})">√ó</button>
        </div>
    `).join('');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä—É–∂–∫–∞
function editCircle(type, id) {
    const items = getItemsByType(type);
    const item = items.find(i => i.id === id);
    if (item) {
        const newAmount = prompt('–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É:', item.amount);
        if (newAmount && !isNaN(newAmount) && parseFloat(newAmount) > 0) {
            item.amount = parseFloat(newAmount);
            const newDescription = prompt('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ:', item.description) || item.description;
            item.description = newDescription;
            saveData();
        }
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä—É–∂–∫–∞
function deleteCircle(type, id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
        const items = getItemsByType(type);
        const index = items.findIndex(i => i.id === id);
        if (index !== -1) {
            items.splice(index, 1);
            saveData();
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ —Ç–∏–ø—É
function getItemsByType(type) {
    switch(type) {
        case 'income': return appData.incomes;
        case 'debt': return appData.debts;
        case 'expense': return appData.expenses;
        default: return [];
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
    const totalIncome = appData.incomes.reduce((sum, item) => sum + item.amount, 0);
    const totalDebts = appData.debts.reduce((sum, item) => sum + item.amount, 0);
    const totalExpenses = appData.expenses.reduce((sum, item) => sum + item.amount, 0);
    const balance = totalIncome - totalDebts - totalExpenses;
    
    const balanceElement = document.getElementById('balance-amount');
    if (balanceElement) {
        balanceElement.textContent = appData.settings.currency + balance;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
function updateOperationsList() {
    const container = document.getElementById('operations-list');
    if (!container) return;
    
    const transactions = appData.transactions;
    
    if (transactions.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</div>';
        return;
    }
    
    container.innerHTML = transactions.map(transaction => {
        const typeClass = transaction.amount > 0 ? 'income' : 'expense';
        const typeIcon = transaction.amount > 0 ? 'üí∞' : transaction.type === 'debt' ? 'üè¶' : 'üõí';
        const typeColor = transaction.amount > 0 ? '#34C759' : transaction.type === 'debt' ? '#FF9500' : '#FF3B30';
        
        return `
            <div class="operation-item">
                <div class="operation-info">
                    <div class="operation-icon" style="background: ${typeColor}">
                        ${typeIcon}
                    </div>
                    <div class="operation-details">
                        <div class="operation-title">${transaction.description}</div>
                        <div class="operation-meta">${formatDate(transaction.date)}</div>
                    </div>
                </div>
                <div class="operation-amount ${typeClass}">
                    ${transaction.amount > 0 ? '+' : ''}${appData.settings.currency}${Math.abs(transaction.amount)}
                </div>
            </div>
        `;
    }).join('');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

// –ß–∞—Å—ã
function startClock() {
    function updateTime() {
        const now = new Date();
        const timeElement = document.getElementById('current-time');
        if (timeElement) {
            timeElement.textContent = 
                now.getHours().toString().padStart(2, '0') + ':' + 
                now.getMinutes().toString().padStart(2, '0');
        }
    }
    
    updateTime();
    setInterval(updateTime, 60000);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettingsModal() {
    const action = confirm("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–û–ö - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n–û—Ç–º–µ–Ω–∞ - –û—Ç–º–µ–Ω–∞");
    if (action) {
        clearAllData();
    }
}

function clearAllData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
        appData = {
            incomes: [],
            debts: [], 
            expenses: [],
            transactions: [],
            settings: { currency: "‚ÇΩ" }
        };
        saveData();
        alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!');
    }
}