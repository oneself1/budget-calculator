// –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    incomes: [],
    debts: [], 
    expenseCategories: [],
    expenseOperations: [],
    settings: { currency: "‚ÇΩ" }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initApp() {
    console.log("Budget App: Initializing...");
    try {
        loadData();
        updateUI();
        startClock();
        console.log("Budget App: Initialized successfully");
    } catch (error) {
        console.error("Budget App: Initialization error:", error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
    try {
        const saved = localStorage.getItem('budgetAppData');
        if (saved) {
            appData = JSON.parse(saved);
        }
    } catch (e) {
        console.error("Error loading data:", e);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
    try {
        localStorage.setItem('budgetAppData', JSON.stringify(appData));
    } catch (e) {
        console.error("Error saving data:", e);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    updateBalance();
    updateCircles();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
    const totalIncome = appData.incomes.reduce((sum, item) => sum + (item.amount || 0), 0);
    const totalExpenses = appData.expenseCategories.reduce((sum, item) => sum + (item.amount || 0), 0);
    const balance = totalIncome - totalExpenses;
    
    const balanceElement = document.getElementById('balance-amount');
    if (balanceElement) {
        balanceElement.textContent = appData.settings.currency + balance;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä—É–∂–∫–æ–≤
function updateCircles() {
    updateIncomeCategories();
    updateExpenseCategories();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
function updateIncomeCategories() {
    const container = document.getElementById('income-circles');
    if (!container) return;
    
    if (appData.incomes.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–∞–∂–º–∏ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å</div>';
        return;
    }
    
    container.innerHTML = appData.incomes.map(income => `
        <div class="circle-item circle-income" onclick="editIncomeCategory(${income.id})">
            <div class="circle-actions">
                <button class="circle-action-btn circle-delete" onclick="event.stopPropagation(); deleteIncomeCategory(${income.id})">√ó</button>
            </div>
            <div class="circle-icon">${income.icon || 'üí∞'}</div>
            <div class="circle-amount">${appData.settings.currency}${income.amount}</div>
            <div class="circle-label">${income.name}</div>
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
function updateExpenseCategories() {
    const container = document.getElementById('expense-circles');
    if (!container) return;
    
    if (appData.expenseCategories.length === 0) {
        container.innerHTML = '<div class="empty-state">–ù–∞–∂–º–∏ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å</div>';
        return;
    }
    
    container.innerHTML = appData.expenseCategories.map(category => `
        <div class="circle-item circle-expense" onclick="editExpenseCategory(${category.id})">
            <div class="circle-actions">
                <button class="circle-action-btn circle-delete" onclick="event.stopPropagation(); deleteExpenseCategory(${category.id})">√ó</button>
            </div>
            <div class="circle-icon">${category.icon || 'üõí'}</div>
            <div class="circle-amount">${appData.settings.currency}${category.amount}</div>
            <div class="circle-label">${category.name}</div>
        </div>
    `).join('');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function switchScreen(screenName) {
    console.log("Switching to screen:", screenName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    document.querySelectorAll('.nav-item').forEach((item, index) => {
        if ((screenName === 'overview' && index === 0) ||
            (screenName === 'operations' && index === 1) ||
            (screenName === 'report' && index === 2)) {
            item.classList.add('active');
        }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    const targetScreen = document.getElementById(`${screenName}-screen`);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
function addNewIncomeCategory() {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:');
    if (!name) return;
    
    const amount = parseFloat(prompt('–°—É–º–º–∞:', '0')) || 0;
    
    appData.incomes.push({
        id: Date.now(),
        name: name,
        amount: amount,
        icon: 'üí∞'
    });
    
    saveData();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
function addNewExpenseCategory() {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:');
    if (!name) return;
    
    appData.expenseCategories.push({
        id: Date.now(),
        name: name,
        amount: 0,
        icon: 'üõí'
    });
    
    saveData();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function showCategorySelection() {
    alert('–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

// –ß–∞—Å—ã –∏ –¥–∞—Ç–∞
function startClock() {
    function updateTime() {
        const now = new Date();
        const timeElement = document.getElementById('current-time');
        const dateElement = document.getElementById('current-date');
        
        if (timeElement) {
            timeElement.textContent = 
                now.getHours().toString().padStart(2, '0') + ':' + 
                now.getMinutes().toString().padStart(2, '0');
        }
        
        if (dateElement) {
            dateElement.textContent = 
                now.getDate().toString().padStart(2, '0') + '.' + 
                (now.getMonth() + 1).toString().padStart(2, '0') + '.' + 
                now.getFullYear();
        }
    }
    
    updateTime();
    setInterval(updateTime, 60000);
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
function addNewCircle(type) {
    alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ' + type + ' - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function editIncomeCategory(id) {
    alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function editExpenseCategory(id) {
    alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function deleteIncomeCategory(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
        appData.incomes = appData.incomes.filter(income => income.id !== id);
        saveData();
    }
}

function deleteExpenseCategory(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
        appData.expenseCategories = appData.expenseCategories.filter(cat => cat.id !== id);
        saveData();
    }
}

function showSettingsModal() {
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function hideCategorySelection() {
    console.log('Hide category selection');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded - starting app");
    initApp();
});

// –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
window.addEventListener('load', function() {
    console.log("Window loaded");
    setTimeout(initApp, 100);
});